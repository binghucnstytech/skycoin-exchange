package account

import (
	"errors"
	"sync"

	"github.com/skycoin/skycoin/src/cipher"
)

type AccountManager interface {
	CreateAccountWithPubkey(pk cipher.PubKey) (Accounter, error)
	GetAccount(id AccountID) (Accounter, error)
	Save()
	Load()
}

// AccountManager manage all the accounts in the server.
type ExchangeAccountManager struct {
	Accounts map[AccountID]Accounter
	mtx      sync.RWMutex
	//AccountMap map[cipher.Address]uint64
}

// NewAccountManager
func NewExchangeAccountManager() AccountManager {
	return &ExchangeAccountManager{
		Accounts: make(map[AccountID]Accounter)}
}

// CreateAccountWithPubkey create an accounter with specific pubkey, this pubkey is generated by client.
func (self *ExchangeAccountManager) CreateAccountWithPubkey(pubkey cipher.PubKey) (Accounter, error) {
	self.mtx.Lock()
	defer self.mtx.Unlock()
	// check duplicate
	if _, ok := self.Accounts[AccountID(pubkey)]; ok {
		return nil, errors.New("duplicate account id")
	}
	at := newExchangeAccount(AccountID(pubkey))
	self.Accounts[AccountID(pubkey)] = &at
	return &at, nil
}

// GetAccount return the account of specific id.
func (self *ExchangeAccountManager) GetAccount(id AccountID) (Accounter, error) {
	self.mtx.RLock()
	defer self.mtx.RUnlock()
	if account, ok := self.Accounts[id]; ok {
		return account, nil
	} else {
		return nil, errors.New("account does not exist")
	}
}

// persistance to disc. Save as JSON
func (self *ExchangeAccountManager) Save() {

}

func (self *ExchangeAccountManager) Load() {
	//load accounts
}
