// Code generated by protoc-gen-go.
// source: pp.account.proto
// DO NOT EDIT!

package pp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateAccountReq struct {
	Pubkey           []byte `protobuf:"bytes,1,opt,name=pubkey" json:"pubkey,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CreateAccountReq) Reset()                    { *m = CreateAccountReq{} }
func (m *CreateAccountReq) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountReq) ProtoMessage()               {}
func (*CreateAccountReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *CreateAccountReq) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

type CreateAccountRes struct {
	AccountId        []byte `protobuf:"bytes,10,opt,name=account_id" json:"account_id,omitempty"`
	CreatedAt        *int64 `protobuf:"varint,20,opt,name=created_at" json:"created_at,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CreateAccountRes) Reset()                    { *m = CreateAccountRes{} }
func (m *CreateAccountRes) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountRes) ProtoMessage()               {}
func (*CreateAccountRes) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CreateAccountRes) GetAccountId() []byte {
	if m != nil {
		return m.AccountId
	}
	return nil
}

func (m *CreateAccountRes) GetCreatedAt() int64 {
	if m != nil && m.CreatedAt != nil {
		return *m.CreatedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*CreateAccountReq)(nil), "pp.CreateAccountReq")
	proto.RegisterType((*CreateAccountRes)(nil), "pp.CreateAccountRes")
}

func init() { proto.RegisterFile("pp.account.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 110 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x28, 0xd0, 0x4b,
	0x4c, 0x4e, 0xce, 0x2f, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x28,
	0x50, 0x52, 0xe2, 0x12, 0x70, 0x2e, 0x4a, 0x4d, 0x2c, 0x49, 0x75, 0x84, 0x48, 0x05, 0xa5, 0x16,
	0x0a, 0xf1, 0x71, 0xb1, 0x15, 0x94, 0x26, 0x65, 0xa7, 0x56, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0xf0,
	0x28, 0x59, 0x61, 0xa8, 0x29, 0x16, 0x12, 0xe2, 0xe2, 0x82, 0x1a, 0x16, 0x9f, 0x99, 0x22, 0xc1,
	0x05, 0x52, 0x07, 0x12, 0x4b, 0x06, 0xab, 0x4b, 0x89, 0x4f, 0x2c, 0x91, 0x10, 0x01, 0x8a, 0x31,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xdf, 0x8c, 0x41, 0x76, 0x00, 0x00, 0x00,
}
